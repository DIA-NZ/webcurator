<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:sec="http://www.springframework.org/schema/security"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd
    http://www.springframework.org/schema/security
    http://www.springframework.org/schema/security/spring-security.xsd">

	<import resource="security-userdn-list.xml"/>
   <!-- ======================== FILTER CHAIN ======================= -->

	<!--  if you wish to use channel security, add "channelProcessingFilter," in front
	      of "httpSessionContextIntegrationFilter" in the list below 
	        
	        /jsp/**=httpSessionContextIntegrationFilter,authenticationProcessingFilter,exceptionTranslationFilter,filterInvocationInterceptor
            /j_spring_security_check=httpSessionContextIntegrationFilter, authenticationProcessingFilter, exceptionTranslationFilter,filterInvocationInterceptor
	      
	      
	      -->
	<bean id="springSecurityFilterChain" class="org.springframework.security.web.FilterChainProxy">
		<constructor-arg>
			<list>
				<sec:filter-chain pattern="/curator/credentials/reset-password.html"
								  filters="httpSessionContextIntegrationFilter,authenticationProcessingFilter,exceptionTranslationFilter,filterInvocationInterceptor" />
				<sec:filter-chain pattern="/curator/**"
								  filters="httpSessionContextIntegrationFilter,authenticationProcessingFilter,exceptionTranslationFilter,filterInvocationInterceptor, WCTPasswordExpiredFilter" />
				<sec:filter-chain pattern="/jsp/**"
								  filters="httpSessionContextIntegrationFilter,authenticationProcessingFilter,exceptionTranslationFilter,filterInvocationInterceptor" />
				<sec:filter-chain pattern="/j_spring_security_check"
								  filters="httpSessionContextIntegrationFilter, authenticationProcessingFilter, exceptionTranslationFilter,filterInvocationInterceptor" />
			</list>
		</constructor-arg>
    </bean>
    
    <bean id="WCTPasswordExpiredFilter" class="org.webcurator.auth.dbms.WCTForcePasswordChange" abstract="false" scope="singleton" lazy-init="default" autowire="default">
    </bean>

   <!-- ======================== AUTHENTICATION ======================= -->

	<bean id="authenticationManager" class="org.springframework.security.authentication.ProviderManager" abstract="false" scope="singleton" lazy-init="default" autowire="default">
		<constructor-arg>
			<list>
				<!-- Remove the comments if you want LDAP authentication to occur -->
				<!--      			<ref bean="ldapAuthenticator" /> -->
				<ref bean="daoAuthenticationProvider" />
			</list>
		</constructor-arg>
	</bean>
	
   <bean id="initialDirContextFactory" class="org.springframework.security.ldap.DefaultSpringSecurityContextSource">
      <constructor-arg value="${ldap.url}"/>
<!--       <property name="managerDn"><value>OU=WCT Users,DC=webcurator,DC=org</value></property> -->
<!--       <property name="managerPassword"><value>itsAsecretWord</value></property> -->
	</bean>
	

	
	<!-- Note that the distinguished name patterns are in the file "security-userdn-list.xml" -->
	<bean id="ldapAuthenticator" class="org.springframework.security.ldap.authentication.LdapAuthenticationProvider" abstract="false" scope="singleton" lazy-init="default" autowire="default">
		<constructor-arg>
	        <bean class="org.springframework.security.ldap.authentication.BindAuthenticator">
	           <constructor-arg><ref bean="initialDirContextFactory"/></constructor-arg>
<!-- 				Use this if your users have the same ldap dn pattern, and the only difference  -->
<!-- 				is the user name -->
	           <property name="userDnPatterns"><list><value>${ldap.dn}</value></list></property>

<!-- 				Use this and edit security-userdn-list.xml if you need to specify  -->
<!-- 				multiple dn patterns -->
<!-- 	           <property name="userDnPatterns" ref="userDnList"/> -->

<!-- 				Use this and uncomment the associated bean below if you need to specify  -->
<!-- 				a search (e.g. active directory), or the dn does not use the WCT -->
<!-- 				user name -->
<!-- 	           <property name="userSearch" ref="userSearch"/> -->
				
	        </bean>
	      </constructor-arg>
 	      <constructor-arg>
	        <bean class="org.webcurator.auth.ldap.WCTAuthoritiesPopulator">
	        	<property name="authDAO"><ref bean="userRoleDAO"/></property>
	        </bean>
	      </constructor-arg>
	</bean>
	
	<bean id="daoAuthenticationProvider" class="org.springframework.security.authentication.dao.DaoAuthenticationProvider">
  		<property name="userDetailsService"><ref bean="jdbcDaoImpl"/></property>
  		<property name="passwordEncoder"><ref bean="passwordEncoder"/></property>
	</bean>
	
	<bean id="passwordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder">
	</bean>

	<bean id="jdbcDaoImpl" class="org.webcurator.auth.dbms.WCTDAOAuthenticationProvider">
	  <property name="dataSource"><ref bean="dataSource"/></property>
	  <property name="usersByUsernameQuery"><value>select usr_username, usr_password, usr_active, usr_force_pwd_change from ${hibernate.default_schema}.WCTUSER WHERE usr_username = ?</value></property>
	  <property name="authoritiesByUsernameQuery"><value>SELECT 
														  distinct PRV_CODE
														FROM 
														  ${hibernate.default_schema}.WCTUSER,
														  ${hibernate.default_schema}.WCTROLE,
														  ${hibernate.default_schema}.USER_ROLE,
														  ${hibernate.default_schema}.ROLE_PRIVILEGE
														WHERE 
														  PRV_ROLE_OID = ROL_OID and
														  URO_USR_OID = USR_OID and
														  URO_ROL_OID = ROL_OID and
														  usr_username = ?
	</value></property>
	<property name="rolePrefix"><value>ROLE_</value></property>
	</bean>
   

   <!-- Automatically receives AuthenticationEvent messages -->
   <bean id="loggerListener" class="org.springframework.security.authentication.event.LoggerListener"/>

   <bean id="httpSessionContextIntegrationFilter" class="org.springframework.security.web.context.SecurityContextPersistenceFilter">
   </bean>

   <!-- ===================== HTTP CHANNEL REQUIREMENTS ==================== -->

   <!-- You will need to uncomment the "Acegi Channel Processing Filter"
        <filter-mapping> in web.xml for the following beans to be used -->

   <bean id="channelProcessingFilter" class="org.springframework.security.web.access.channel.ChannelProcessingFilter">
      <property name="channelDecisionManager"><ref bean="channelDecisionManager"/></property>
	  <property name="securityMetadataSource">
		   <sec:filter-security-metadata-source request-matcher="regex" use-expressions="false">
			   <sec:intercept-url pattern="\A/acegilogin.jsp.*\Z" access="REQUIRES_SECURE_CHANNEL"/>
			   <sec:intercept-url pattern="\A.*\Z" access="REQUIRES_INSECURE_CHANNEL"/>
		   </sec:filter-security-metadata-source>
	  </property>
   </bean>

   <bean id="channelDecisionManager" class="org.springframework.security.web.access.channel.ChannelDecisionManagerImpl">
      <property name="channelProcessors">
         <list>
            <ref bean="secureChannelProcessor"/>
            <ref bean="insecureChannelProcessor"/>
         </list>
      </property>
   </bean>

   <bean id="secureChannelProcessor" class="org.springframework.security.web.access.channel.SecureChannelProcessor"/>
   <bean id="insecureChannelProcessor" class="org.springframework.security.web.access.channel.InsecureChannelProcessor"/>

   <!-- ===================== HTTP REQUEST SECURITY ==================== -->

   <bean id="exceptionTranslationFilter" class="org.springframework.security.web.access.ExceptionTranslationFilter">
	  <constructor-arg>
		  <ref bean="authenticationProcessingFilterEntryPoint"/>
	  </constructor-arg>
   </bean>

   <bean id="authenticationProcessingFilter" class="org.webcurator.auth.WCTAuthenticationProcessingFilter">
      <property name="authenticationManager"><ref bean="authenticationManager"/></property>
	  <property name="authenticationFailureHandler" ref="failureHandler" />
	  <property name="authenticationSuccessHandler" ref="successHandler" />
      <property name="filterProcessesUrl"><value>/j_spring_security_check</value></property>
      <property name="authDAO"><ref bean="userRoleDAO"/></property>
   </bean>

	<bean id="successHandler" class="org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler" >
		<constructor-arg>
			<value>/curator/home.html</value>
		</constructor-arg>
	</bean>

	<bean id="failureHandler" class="org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler" >
		<property name="defaultFailureUrl" value="/logon.jsp?failed=true" />
	</bean>
   
   <bean id="authenticationProcessingFilterEntryPoint" class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint" abstract="false" scope="singleton" lazy-init="default" autowire="default">
	    <constructor-arg>
		   <value>/logon.jsp</value>
	    </constructor-arg>
		<property name="forceHttps">
			<value>false</value>
		</property>
	</bean>

   <bean id="httpRequestAccessDecisionManager" class="org.springframework.security.access.vote.AffirmativeBased">
      <property name="allowIfAllAbstainDecisions"><value>false</value></property>
	   <constructor-arg>
         <list>
			<bean class="org.springframework.security.web.access.expression.WebExpressionVoter" />
            <ref bean="roleVoter"/>
         </list>
      </constructor-arg>
   </bean>
   
   <bean id="roleVoter" class="org.springframework.security.access.vote.RoleVoter"/>

   <!-- Note the order that entries are placed against the securityMetadataSource is critical.
        The FilterSecurityInterceptor will work from the top of the list down to the FIRST pattern that matches the request URL.
        Accordingly, you should place MOST SPECIFIC (ie a/b/c/d.*) expressions first, with LEAST SPECIFIC (ie a/.*) expressions last -->
   <bean id="filterInvocationInterceptor" class="org.springframework.security.web.access.intercept.FilterSecurityInterceptor">
      <property name="authenticationManager"><ref bean="authenticationManager"/></property>
      <property name="accessDecisionManager"><ref bean="httpRequestAccessDecisionManager"/></property>
 	  <property name="securityMetadataSource">
		   <sec:filter-security-metadata-source>
			   <sec:intercept-url pattern="/index.jsp" access="hasAnyRole('ROLE_ANONYMOUS','ROLE_USER')"/>
			   <sec:intercept-url pattern="/logon.jsp*" access="hasAnyRole('ROLE_ANONYMOUS','ROLE_USER')"/>
			   <sec:intercept-url pattern="/**" access="hasAnyRole('ROLE_ADM','ROLE_LOGIN')"/>
		   </sec:filter-security-metadata-source>
	  </property>
   </bean>

</beans>

